# streeteasy_select <- streeteasy %>% dplyr::select(log_rent, bedrooms, log_bathrooms, log_size_sqft, min_to_subway, floor, building_age_yrs, borough)
# streeteasy_select <- streeteasy %>% dplyr::select(rent, bedrooms, bathrooms, size_sqft, min_to_subway, floor, borough)
# ggpairs(streeteasy_select, aes(colour=borough, alpha=0.4))
streeteasy_select <- streeteasy %>% dplyr::select(rent, bedrooms, bathrooms, size_sqft, min_to_subway, floor)
ggpairs(streeteasy_select, aes(alpha=0.4))
?ggpairs
ggpairs(streeteasy_select[,1:6], aes(alpha=0.4))
# Read-in data
streeteasy <- read_csv("./streeteasy.csv")
# Convert borough, submarket, neighborhood to factors
streeteasy <- streeteasy %>% mutate(borough = factor(borough),
submarket = factor(submarket),
neighborhood = factor(neighborhood))
# Add before_war binary variable (=1 if building_age_yrs >= 50, =0 otherwise)
streeteasy <- streeteasy %>% mutate(before_war = as.numeric(building_age_yrs >=50))
# Add extra terms
streeteasy <- streeteasy %>% mutate(amenity_ct = has_elevator + has_doorman + has_washer_dryer + has_dishwasher + has_gym + has_patio)
# Remove outliers (filter out all samples where min_to_subway >= 30)
streeteasy <- streeteasy %>% filter(min_to_subway<30)
# Remove erroneous data (filter out all samples with bathrooms = 0)
streeteasy <- streeteasy %>% filter(bathrooms > 0)
# Remove outlier (filter out top 5% of rent for each bedroom count)
streeteasy <- streeteasy %>% group_by(bedrooms) %>% filter(rent < quantile(rent, .95)) %>% ungroup()
# Remove trial from The Rockaways (only one sample)
streeteasy <- streeteasy %>% filter(submarket != "The Rockaways")
## Pairwise plots
# streeteasy$log_rent = log(streeteasy$rent)
# streeteasy$log_bathrooms = log(streeteasy$bathrooms)
# streeteasy$log_size_sqft = log(streeteasy$size_sqft)
# streeteasy_select <- streeteasy %>% dplyr::select(log_rent, bedrooms, log_bathrooms, log_size_sqft, min_to_subway, floor, building_age_yrs, borough)
# streeteasy_select <- streeteasy %>% dplyr::select(rent, bedrooms, bathrooms, size_sqft, min_to_subway, floor, borough)
# ggpairs(streeteasy_select, aes(colour=borough, alpha=0.4))
streeteasy_select <- streeteasy %>% dplyr::select(rent, bedrooms, bathrooms, size_sqft, min_to_subway, floor)
ggpairs(streeteasy_select[,1:6], aes(alpha=0.4))
## Pairwise plots
# streeteasy$log_rent = log(streeteasy$rent)
# streeteasy$log_bathrooms = log(streeteasy$bathrooms)
# streeteasy$log_size_sqft = log(streeteasy$size_sqft)
# streeteasy_select <- streeteasy %>% dplyr::select(log_rent, bedrooms, log_bathrooms, log_size_sqft, min_to_subway, floor, building_age_yrs, borough)
streeteasy_select <- streeteasy %>% dplyr::select(rent, bedrooms, bathrooms, size_sqft, min_to_subway, floor, borough)
ggpairs(streeteasy_select, aes(colour=borough, alpha=0.4))
### table of contents ###
# set up
# a. residual plots
# b. residual QQ plot
#     TODO formalize normality test
# c. BP test
# d. ANOVA
# sample calls
#########################
### set up ###
library(readr)
library(tidyverse)
library(ggplot2)
library(GGally)
library(lmtest)
library(nortest)
# filePath = '/Users/stevenfriedman/Documents/5205FinalProject'
# setwd(filePath)
# data = as_tibble(read_csv('streeteasy_cleaned.csv'))
data <- as_tibble(read_csv('streeteasy_combined.csv'))
model = lm(log(rent)~bedrooms + min_to_subway + borough + bathrooms+floor + log(size_sqft) + submarket
, data)
#in order to examin residuals above or below a threshold
# low_e = data %>%
#         mutate(e = model$residuals, e_std = rstandard(model)) %>%
#         filter(e_std < -1.5) %>%
#         arrange(desc(e_std) )
#
# high_e = data %>%
#   mutate(e = model$residuals, e_std = rstandard(model)) %>%
#   filter(e_std > 2) %>%
#   arrange(desc(e_std) )
##############
### a. residual plots ###
print_residual_plots = function(mdl, useggplot = FALSE){
alpha = 0.4
if(useggplot){
fig <- ggplot(mdl) +
geom_point(aes(x=fitted_values, y=resids,color=borough), alpha=alpha)+
labs(x='fitted values', y= 'residuals')+theme_light()
ggsave('./Plots/residuals_vs_fittedvals.png',
plot=fig,width=5,height=5)
}else{
plot(x=mdl$fitted.values, y=mdl$residuals, ylab='residual', xlab='fitted val')
}
n <- ncol(mdl)
for(col in 2:(n-2)){
if(useggplot){
fig <- ggplot(mdl) +
geom_point(aes_string(x=names(mdl)[col],y="resids",
color="borough"), alpha=alpha)+
labs(x=names(mdl)[col],y='residuals')+ theme_light()
ggsave(paste0('./Plots/residuals_vs_',names(mdl)[col],'.png'),
plot=fig, width=5, height=5)
}else{
plot(x=unlist(data[,c(col)]), y=mdl$residuals, ylab='residual', xlab=col)
}
}
}
######################
### b. residual QQ plot ###
print_qq_plot = function(model){
residuals = rstandard(model)
fig <- ggplot(tibble(resids=residuals), aes(sample=resids))+
stat_qq()+
geom_qq_line()+
labs(x = "Expected", y = "Residuals",
title="Residual QQ-Plot")
ggsave('./Plots/residual_qqplot.png',
plot=fig, width=5, height=5)
}
########################
### c. BP test ###
#for constancy of error variance
print_bp_results = function(model, alpha = 0.05){
df = length(model$coefficients) - 1
critical_val = qchisq(1-alpha, df)
bp = bptest(model, studentize=FALSE)
if(bp$statistic <= critical_val){
interp = sprintf("BP statistic %f is less than critical value %f, so accept H0, that error variance is constant across all predictor variables", bp$statistic, critical_val)
}else{
interp = sprintf("BP statistic %f is greater than critical value %f, so reject H0 and conclude that there is nonconstancy of error variance with at least on predictor variable", bp$statistic, critical_val)
}
cat(
sprintf("* Critical val is %f for %i degrees of freedom at %f significance level", critical_val, df, alpha),
paste("*", interp),
"* R library BP test results:",
sep="\n"
)
bp
}
##################
### d. ANOVA ###
print_anova = function(model){
anova(model)
}
################
### model diagnostics sample calls ###
#works if borough is included
model_tibble = data%>%mutate(fitted_values = model$fitted.values, resids = model$residuals)
print_residual_plots(model_tibble, useggplot = TRUE)
# print_residual_plots(model_tibble)
print_qq_plot(model)
print_bp_results(model)
print_anova(model)
######################################
#test for normality
ad.test(rstandard(model))
ks.test(rstandard(model), "pnorm",mean=0,sd=1, alternative="two.sided")
### table of contents ###
# set up
# a. residual plots
# b. residual QQ plot
#     TODO formalize normality test
# c. BP test
# d. ANOVA
# sample calls
#########################
### set up ###
library(readr)
library(tidyverse)
library(ggplot2)
library(GGally)
library(lmtest)
library(nortest)
# filePath = '/Users/stevenfriedman/Documents/5205FinalProject'
# setwd(filePath)
# data = as_tibble(read_csv('streeteasy_cleaned.csv'))
data <- as_tibble(read_csv('streeteasy_combined.csv'))
model = lm(log(rent)~bedrooms + min_to_subway + borough + bathrooms+floor + log(size_sqft) + submarket
+ min_to_subway
, data)
#in order to examin residuals above or below a threshold
# low_e = data %>%
#         mutate(e = model$residuals, e_std = rstandard(model)) %>%
#         filter(e_std < -1.5) %>%
#         arrange(desc(e_std) )
#
# high_e = data %>%
#   mutate(e = model$residuals, e_std = rstandard(model)) %>%
#   filter(e_std > 2) %>%
#   arrange(desc(e_std) )
##############
### a. residual plots ###
print_residual_plots = function(mdl, useggplot = FALSE){
alpha = 0.4
if(useggplot){
fig <- ggplot(mdl) +
geom_point(aes(x=fitted_values, y=resids,color=borough), alpha=alpha)+
labs(x='fitted values', y= 'residuals')+theme_light()
ggsave('./Plots/residuals_vs_fittedvals.png',
plot=fig,width=5,height=5)
}else{
plot(x=mdl$fitted.values, y=mdl$residuals, ylab='residual', xlab='fitted val')
}
n <- ncol(mdl)
for(col in 2:(n-2)){
if(useggplot){
fig <- ggplot(mdl) +
geom_point(aes_string(x=names(mdl)[col],y="resids",
color="borough"), alpha=alpha)+
labs(x=names(mdl)[col],y='residuals')+ theme_light()
ggsave(paste0('./Plots/residuals_vs_',names(mdl)[col],'.png'),
plot=fig, width=5, height=5)
}else{
plot(x=unlist(data[,c(col)]), y=mdl$residuals, ylab='residual', xlab=col)
}
}
}
######################
### b. residual QQ plot ###
print_qq_plot = function(model){
residuals = rstandard(model)
fig <- ggplot(tibble(resids=residuals), aes(sample=resids))+
stat_qq()+
geom_qq_line()+
labs(x = "Expected", y = "Residuals",
title="Residual QQ-Plot")
ggsave('./Plots/residual_qqplot.png',
plot=fig, width=5, height=5)
}
########################
### c. BP test ###
#for constancy of error variance
print_bp_results = function(model, alpha = 0.05){
df = length(model$coefficients) - 1
critical_val = qchisq(1-alpha, df)
bp = bptest(model, studentize=FALSE)
if(bp$statistic <= critical_val){
interp = sprintf("BP statistic %f is less than critical value %f, so accept H0, that error variance is constant across all predictor variables", bp$statistic, critical_val)
}else{
interp = sprintf("BP statistic %f is greater than critical value %f, so reject H0 and conclude that there is nonconstancy of error variance with at least on predictor variable", bp$statistic, critical_val)
}
cat(
sprintf("* Critical val is %f for %i degrees of freedom at %f significance level", critical_val, df, alpha),
paste("*", interp),
"* R library BP test results:",
sep="\n"
)
bp
}
##################
### d. ANOVA ###
print_anova = function(model){
anova(model)
}
################
### model diagnostics sample calls ###
#works if borough is included
model_tibble = data%>%mutate(fitted_values = model$fitted.values, resids = model$residuals)
print_residual_plots(model_tibble, useggplot = TRUE)
# print_residual_plots(model_tibble)
print_qq_plot(model)
print_bp_results(model)
print_anova(model)
######################################
#test for normality
ad.test(rstandard(model))
ks.test(rstandard(model), "pnorm",mean=0,sd=1, alternative="two.sided")
### table of contents ###
# set up
# a. residual plots
# b. residual QQ plot
#     TODO formalize normality test
# c. BP test
# d. ANOVA
# sample calls
#########################
### set up ###
library(readr)
library(tidyverse)
library(ggplot2)
library(GGally)
library(lmtest)
library(nortest)
# filePath = '/Users/stevenfriedman/Documents/5205FinalProject'
# setwd(filePath)
# data = as_tibble(read_csv('streeteasy_cleaned.csv'))
data <- as_tibble(read_csv('streeteasy_combined.csv'))
model = lm(log(rent)~bedrooms + min_to_subway + borough + bathrooms+floor + log(size_sqft) + submarket, data)
#in order to examin residuals above or below a threshold
# low_e = data %>%
#         mutate(e = model$residuals, e_std = rstandard(model)) %>%
#         filter(e_std < -1.5) %>%
#         arrange(desc(e_std) )
#
# high_e = data %>%
#   mutate(e = model$residuals, e_std = rstandard(model)) %>%
#   filter(e_std > 2) %>%
#   arrange(desc(e_std) )
##############
### a. residual plots ###
print_residual_plots = function(mdl, useggplot = FALSE){
alpha = 0.4
if(useggplot){
fig <- ggplot(mdl) +
geom_point(aes(x=fitted_values, y=resids,color=borough), alpha=alpha)+
labs(x='fitted values', y= 'residuals')+theme_light()
ggsave('./Plots/residuals_vs_fittedvals.png',
plot=fig,width=5,height=5)
}else{
plot(x=mdl$fitted.values, y=mdl$residuals, ylab='residual', xlab='fitted val')
}
n <- ncol(mdl)
for(col in 2:(n-2)){
if(useggplot){
fig <- ggplot(mdl) +
geom_point(aes_string(x=names(mdl)[col],y="resids",
color="borough"), alpha=alpha)+
labs(x=names(mdl)[col],y='residuals')+ theme_light()
ggsave(paste0('./Plots/residuals_vs_',names(mdl)[col],'.png'),
plot=fig, width=5, height=5)
}else{
plot(x=unlist(data[,c(col)]), y=mdl$residuals, ylab='residual', xlab=col)
}
}
}
######################
### b. residual QQ plot ###
print_qq_plot = function(model){
residuals = rstandard(model)
fig <- ggplot(tibble(resids=residuals), aes(sample=resids))+
stat_qq()+
geom_qq_line()+
labs(x = "Expected", y = "Residuals",
title="Residual QQ-Plot")
ggsave('./Plots/residual_qqplot.png',
plot=fig, width=5, height=5)
}
########################
### c. BP test ###
#for constancy of error variance
print_bp_results = function(model, alpha = 0.05){
df = length(model$coefficients) - 1
critical_val = qchisq(1-alpha, df)
bp = bptest(model, studentize=FALSE)
if(bp$statistic <= critical_val){
interp = sprintf("BP statistic %f is less than critical value %f, so accept H0, that error variance is constant across all predictor variables", bp$statistic, critical_val)
}else{
interp = sprintf("BP statistic %f is greater than critical value %f, so reject H0 and conclude that there is nonconstancy of error variance with at least on predictor variable", bp$statistic, critical_val)
}
cat(
sprintf("* Critical val is %f for %i degrees of freedom at %f significance level", critical_val, df, alpha),
paste("*", interp),
"* R library BP test results:",
sep="\n"
)
bp
}
##################
### d. ANOVA ###
print_anova = function(model){
anova(model)
}
################
### model diagnostics sample calls ###
#works if borough is included
model_tibble = data%>%mutate(fitted_values = model$fitted.values, resids = model$residuals)
print_residual_plots(model_tibble, useggplot = TRUE)
# print_residual_plots(model_tibble)
print_qq_plot(model)
print_bp_results(model)
print_anova(model)
######################################
#test for normality
ad.test(rstandard(model))
ks.test(rstandard(model), "pnorm",mean=0,sd=1, alternative="two.sided")
### table of contents ###
# set up
# a. residual plots
# b. residual QQ plot
#     TODO formalize normality test
# c. BP test
# d. ANOVA
# sample calls
#########################
### set up ###
library(readr)
library(tidyverse)
library(ggplot2)
library(GGally)
library(lmtest)
library(nortest)
# filePath = '/Users/stevenfriedman/Documents/5205FinalProject'
# setwd(filePath)
# data = as_tibble(read_csv('streeteasy_cleaned.csv'))
data <- as_tibble(read_csv('streeteasy_combined.csv'))
model = lm(log(rent)~bedrooms + min_to_subway + borough + bathrooms+floor + log(size_sqft) + submarket, data)
#in order to examin residuals above or below a threshold
# low_e = data %>%
#         mutate(e = model$residuals, e_std = rstandard(model)) %>%
#         filter(e_std < -1.5) %>%
#         arrange(desc(e_std) )
#
# high_e = data %>%
#   mutate(e = model$residuals, e_std = rstandard(model)) %>%
#   filter(e_std > 2) %>%
#   arrange(desc(e_std) )
##############
### a. residual plots ###
print_residual_plots = function(mdl, useggplot = FALSE){
alpha = 0.4
if(useggplot){
fig <- ggplot(mdl) +
geom_point(aes(x=fitted_values, y=resids,color=borough), alpha=alpha)+
labs(x='fitted values', y= 'residuals')+theme_light()
ggsave('./Plots/residuals_vs_fittedvals.png',
plot=fig,width=5,height=5)
}else{
plot(x=mdl$fitted.values, y=mdl$residuals, ylab='residual', xlab='fitted val')
}
n <- ncol(mdl)
for(col in 2:(n-2)){
if(useggplot){
fig <- ggplot(mdl) +
geom_point(aes_string(x=names(mdl)[col],y="resids",
color="borough"), alpha=alpha)+
labs(x=names(mdl)[col],y='residuals')+ theme_light()
ggsave(paste0('./Plots/residuals_vs_',names(mdl)[col],'.png'),
plot=fig, width=5, height=5)
}else{
plot(x=unlist(data[,c(col)]), y=mdl$residuals, ylab='residual', xlab=col)
}
}
}
######################
### b. residual QQ plot ###
print_qq_plot = function(model){
residuals = rstandard(model)
fig <- ggplot(tibble(resids=residuals), aes(sample=resids))+
stat_qq()+
geom_qq_line()+
labs(x = "Expected", y = "Residuals",
title="Residual QQ-Plot")
ggsave('./Plots/residual_qqplot.png',
plot=fig, width=5, height=5)
}
########################
### c. BP test ###
#for constancy of error variance
print_bp_results = function(model, alpha = 0.05){
df = length(model$coefficients) - 1
critical_val = qchisq(1-alpha, df)
bp = bptest(model, studentize=FALSE)
if(bp$statistic <= critical_val){
interp = sprintf("BP statistic %f is less than critical value %f, so accept H0, that error variance is constant across all predictor variables", bp$statistic, critical_val)
}else{
interp = sprintf("BP statistic %f is greater than critical value %f, so reject H0 and conclude that there is nonconstancy of error variance with at least on predictor variable", bp$statistic, critical_val)
}
cat(
sprintf("* Critical val is %f for %i degrees of freedom at %f significance level", critical_val, df, alpha),
paste("*", interp),
"* R library BP test results:",
sep="\n"
)
bp
}
##################
### d. ANOVA ###
print_anova = function(model){
anova(model)
}
################
### model diagnostics sample calls ###
#works if borough is included
model_tibble = data%>%mutate(fitted_values = model$fitted.values, resids = model$residuals)
print_residual_plots(model_tibble, useggplot = TRUE)
# print_residual_plots(model_tibble)
print_qq_plot(model)
print_bp_results(model)
print_anova(model)
######################################
#test for normality
ad.test(rstandard(model))
ks.test(rstandard(model), "pnorm",mean=0,sd=1, alternative="two.sided")
## Descriptive statistics
streeteasy_summary <- streeteasy %>% group_by(borough)%>%
summarize(rent_25 = quantile(rent, .25), mean_rent = mean(rent),
rent_75 = quantile(rent, .75), mean_bdrm = mean(bedrooms),
mean_bthrm = mean(bathrooms), sqft_25 = quantile(size_sqft, .25),
mean_sqft = mean(size_sqft), sqft_75 = quantile(size_sqft, .75))
streeteasy_summary
?summarize
dplyr::summarise()
?dplyr::summarise
summarize(streeteasy)
summary(streeteasy)
summary(streeteasy_select)
summary(streeteasy_select)
s=summary(streeteasy_select)
t(s)
t(s)
s=summary(streeteasy_select)
as_data_frame(t(s))
as_tibble(t(s))
as_tibble(s)
library(psych)
install.packages('Hmisc')
describe(streeteasy_select)
library(Hmisc)
describe(streeteasy_select)
install.packages('psych')
library(psych)
psych::describe(streeteasy_select)
psych::describe(streeteasy[,c("rent")])
psych::describe(streeteasy %>% select(rent, bedrooms, bathrooms, size_sqft, min_to_subway, floor, amenity_ct)
)
psych::describe(streeteasy %>% dplyr::select(rent, bedrooms, bathrooms, size_sqft, min_to_subway, floor, amenity_ct))
psych::describe(streeteasy %>% dplyr::select(rent, bedrooms, bathrooms, size_sqft, min_to_subway, floor, amenity_ct))
c(1, "2")
c(1, 2)
